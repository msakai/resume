MASAHIRO SAKAI (酒井 政裕) -- Research and Development Engineer

A computer scientist and software engineer specializing in
functional programming, formal methods, software engineering.

* Email : masahiro.sakai@gmail.com
* Web : http://msakai.jp
* LinkedIn : http://www.linkedin.com/pub/masahiro-sakai/20/b65/391
* GitHub : https://github.com/msakai

----------------------------------------------------------------
Professional Experience
----------------------------------------------------------------

Researcher at Toshiba Corporation.
http://www.toshiba.co.jp/worldwide/index.html
Apr 2007 to Present

Research and software engineering. (TBD)

Key Accomplishments:

* Recommendation system for Kawasaki Grand City Mall project.

* SMT-based semi-automatic test-case generation for FBD
  (Function Block Diagram) programs used in power plant control
  systems.

* Specification mining based on UNSAT core enumeration.

* Helping language/runtime design of Molatomium, a parallel
 programming model for “Cell Broadband Engine”-like
 heterogenious multicore processors and was shipped with
 Toshiba's flagship digital TV “CELL REGZA”.
 https://www.usenix.org/conference/hotpar-10/molatomium-parallel-programming-model-practice

* CForge: Bounded model checker for C language.

* Verification of workflow networks based on model checking.

----------------------------------------------------------------
Skills
----------------------------------------------------------------

Engineering Knowledge and Interests:
  Functional Programming, Language Design, Formal Methods,
  Machine Learning, Recommendation System, Mathematical Optimization.

Preferred Programming Languages and Tools:  
  Haskell, Ruby, Python, C, SAT/SMT solvers.

Languages:
  Japanese: Native Speaker
  English: Limited working proficiency (TOEIC IP score: 875)

----------------------------------------------------------------
Education  
----------------------------------------------------------------

* March 2007: Master of Media and Governance (Course: Cyber Informatics),
  Graduate School of Media and Governance, Keio University.  
  Master thesis: "Fusion Transformations Applicable to Non-Strict Functions"
  ("非正格関数に対して適用可能な融合変換").

* March 2005: Bachelor of Arts in Policy Management,
  Faculty of Policy Management, Keio University.

----------------------------------------------------------------
Books
----------------------------------------------------------------

* Benjamin C. Pierce, Eijiro Sumii, Yusuke Endoh, Masahiro Sakai,
  Keigo Imai, Yusuke Kuroki, Yoshihiro Imai, Takafumi Saikawa and
  Takeo Imai, “型システム入門－プログラミング言語と型の理論－”
  (Japanese translation of “Types and Programming Languages”).
  Ohmsha, 2013. ISBN: 978-4-274-06911-6

* Daniel Jackson, Shin Nakajima, Takeo Imai, Masahiro Sakai,
  Yusuke Endoh and Yoshio Kataoka,
  “抽象によるソフトウェア設計－Alloyではじめる形式手法”
  (Japanese translation of “Software Abstractions: Logic,
  Language, and Analysis”). Ohmsha, 2011. ISBN: 978-4-274-06858-4

----------------------------------------------------------------
Selected Publications
----------------------------------------------------------------

* Masahiro Sakai and Takeo Imai,
  “Interplay between SAT and other Constraint Problems,”
  Computer Software, Vol. 32, No. 1, 2015, pp. 103-119.
  doi:10.11309/jssst.32.1_103
  https://www.jstage.jst.go.jp/article/jssst/32/1/32_1_103/_article/-char/en/

* Kohei Maruchi, Hiromasa Shin and Masahiro Sakai,
  "MC/DC-like Structural Coverage Criteria for Function Block Diagrams,"
  In proceedings of Software Testing, Verification and Validation Workshops
  (ICSTW). Cleveland, Ohio USA, 2014. pp. 253-259.
  doi:10.1109/ICSTW.2014.27
  http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6825670

* Takeo Imai, Masahiro Sakai, Masami Hagiya, “An Inference
  Method of Quasi-Weakest Preconditions by Minimal Unsatisfiable
  Core Enumeration,”
  Computer Software, Vol. 30, No. 2, 2013, pp. 207-226.
  doi:10.11309/jssst.30.2_207
  https://www.jstage.jst.go.jp/article/jssst/30/2/30_2_207/_article/-char/en/

* Masahiro Sakai, Kohei Maruchi and Takeo Imai, "Model-checking
  C programs against JML-like specification language," in Proceedings
  of the 19th Asia-Pacific Software Engineering Conference (APSEC2012),
  Hong Kong, 2012, pp. 174-183. doi:10.1109/APSEC.2012.68
  http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6462652

* Masahiro Sakai,
  "Fusion Transformations Applicable to Non-Strict Functions,"
  ("非正格関数に対して適用可能な融合変換,")
  Master thesis, Graduate School of Media and Governance, Keio University,
  Jan. 2007.

----------------------------------------------------------------
Proffessinal Services
----------------------------------------------------------------

* External reviewer of IPSJ/SIGSE Software Engineering Symposium
  (SES2014).

* Reviewing technical books (about computer science and
  functional programming) before publication:

  * Graham Hutton and Kazuhiko Yamamoto, “プログラミングHaskell”
    (Japanese translation of “Programming in Haskell”), Ohmsha,
    2009. ISBN: 978-4274067815

  * Jeremy Gibbons, Oege de Moor and Nobuo Yamashita,
    “関数プログラミングの楽しみ”(Japanese translation of “the fun
    of programming”), Ohmsha, 2010. ISBN: 978-4274068058

  * Richard Bird and Nobuo Yamashita, “関数プログラミング入門 ―
    Haskellで学ぶ原理と技法―” (Japanese translation of
    “Introduction to Functional Programming with Haskell),
    Ohmsha, 2012. IBSN: 978-4274068966

  * Tom Stuart, Koichi Saasda and Takashi Sasai, “アンダースタン
    ディング コンピュテーション--単純な機械から不可能なプログラムまで”
    (Japanese translation of “Understanding Computation -- From
    Simple Machines to Impossible Programs”, O'Reilly Japan,
    2014. ISBN: 978-4873116976

  * Richard Bird and Nobuo Yamashita, “関数プログラミング 珠玉の
    アルゴリズムデザイン” (Japanese translation of “Pearls of
    Functional Algorithm Design”), Ohmsha, 2014.
    ISBN: 978-4274050640

----------------------------------------------------------------
Open Source Activities
----------------------------------------------------------------

* toysolver / toysat
  http://hackage.haskell.org/package/toysolver
  https://github.com/msakai/toysolver

  It provides solver implementation of various problems
  including SAT, Max-SAT, PBS (Pseudo Boolean Satisfaction),
  PBO (Pseudo Boolean Optimization), MILP (Mixed Integer
  Linear Programming) and non-linear real arithmetic.
  In particular it contains a moderately-fast pure-Haskell
  SAT solver 'toysat'. I submitted it to solver competitions
  (Pseudo Boolean Competition and Max-SAT Evalutions) and
  ranked high in some competition categories.

* Ruby-GNOME2
  http://ruby-gnome2.osdn.jp/

  Ruby-GNOME2 is a set of Ruby language bindings for the
  GNOME 2.0 development environment. I was one of core
  developpers in the early days. In particular I have
  designed/wrote a general bridge between Ruby's object system
  and GObject object system using reflection/introspection
  features and replaced non-extensible hard-coded one in
  its predecessor Ruby/GTK1.

* PTQ : An implementation of Montague's PTQ in Haskell
  http://hackage.haskell.org/package/PTQ
  https://github.com/msakai/ptq

  Montague grammer and PTQ (The Proper Treatment of
  Quantification in Ordinary English) by Richard Montague
  were pioneering work in the field of formal semantics
  of natural languages, and showed that natural languages
  (like English) and formal languages (like programming
  languages) can be treated in the same way. I implemented
  his theory in interactive environment.

* CPL : A categorical programming language interpreter
  http://hackage.haskell.org/package/CPL
  https://github.com/msakai/cpl

  I re-implemented CPL, a functional programming language
  based on category theory, designed by Prof. Tatsuya Hagino.
  In CPL, data types are declared in a categorical manner by
  adjunctions. Each data type is declared with its basic
  operations or morphisms. Programs consist of these morphisms,
  and execution of programs is the reduction of elements (i.e.
  special morphisms) to their canonical form.

----------------------------------------------------------------
Activities
----------------------------------------------------------------

* Study group of category theory (圏論勉強会): 2004 - 2012

  Category theory is a highly general and abstract mathematical
  theory, which has applications not only in mathmatics but also
  in theoretical computer science, functional programming,
  physics, linguistics and many other fields. I was one of core
  members of the study group and we had studied following
  materials:

  * “Conceptual Mathematics: A First Introduction to Categories”
    by F. William Lawvere and Stephen Hoel Schanuel,
  * “Categories, Types, and Structures: An Introduction to
    Category Theory for the Working Computer Scientist”
    by Andrea Asperti and Giuseppe Longo,
  * “The Haskell Programmer's Guide to the IO Monad — Don't
    Panic” by Stefan Klinger,
  * “Temperley-Lieb Algebra: From Knot Theory to Logic and
    Computation via Quantum Mechanics”
    by Samson Abramsky
  * “A survey of graphical languages for monoidal categories”
    by Peter Selinger
  * “Categorical Logic and Type Theory”
    by Bart Jacobs.

  There is an Japanese article about this study group:
  “Technical Study Session Map in Japan - Join a Live Session
  of Engineers!”, 情報処理, Vol.52, No.4, Apr. 2011.
  http://id.nii.ac.jp/1001/00073853/

* RHG reading group (RHG読書会): 2003 - 2009

  This study group was a group of programming language geeks.
  It was started initially as a study group of reading
  “Rubyソースコード完全解説” (known as “Ruby Hacking Guide”),
  but eventually we have studied many programming and
  programming langauge related books/materials:

  * YARV (Ruby >=1.9 VM),
  * なでしこ (a Japanese programmign language),
  * MinCaml,
  * “ふつうのLinuxプログラミング--Linuxの仕組みから学べるgccプログラミングの王道”,
  * “ふつうのHaskellプログラミング--ふつうのプログラマのための関数型言語入門”,
  * “入門JavaScript”,
  * “実践Common Lisp” (Japanese translation of “Practical Common Lisp”),
  * “ふつうのコンパイラをつくろう--言語処理系をつくりながら学ぶコンパイルと実行環境の仕組み”.

----------------------------------------------------------------
Reference available upon request
----------------------------------------------------------------
